{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","console","log","Error","statusText","url","fetch","then","_handleErrors","json","dado","header","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;gCAESC,G,EAAI;AACjB,OAAG,CAACA,IAAIC,EAAR,EAAY;AACXC,YAAQC,GAAR,CAAY,kCAAZ;AACA,UAAM,IAAIC,KAAJ,CAAUJ,IAAIK,UAAd,CAAN;AACA;AACD,UAAOL,GAAP;AACA;;;sBACGM,G,EAAI;AAAA;;AACP,UAAOC,MAAMD,GAAN,EACNE,IADM,CACD;AAAA,WAAO,MAAKC,aAAL,CAAmBT,GAAnB,CAAP;AAAA,IADC,EAENQ,IAFM,CAED;AAAA,WAAOR,IAAIU,IAAJ,EAAP;AAAA,IAFC,CAAP;AAGA;;;uBACIJ,G,EAAKK,I,EAAMC,M,EAAO;AAAA;;AACtB,UAAOL,MAAMD,GAAN,EAAW;AACjBO,aAASD,MADQ;AAEjBE,YAAQ,MAFS;AAGjBC,UAAMJ;AAHW,IAAX,EAKNH,IALM,CAKD;AAAA,WAAO,OAAKC,aAAL,CAAmBT,GAAnB,CAAP;AAAA,IALC,EAMNQ,IANM,CAMD;AAAA,WAAOR,IAAIU,IAAJ,EAAP;AAAA,IANC,CAAP;AAOA;;;0BACMJ,G,EAAKM,M,EAAO;AAAA;;AAClB,UAAOL,MAAMD,GAAN,EAAW;AACjBQ,YAAQ,QADS;AAEjBD,aAASD;AAFQ,IAAX,EAINJ,IAJM,CAID;AAAA,WAAO,OAAKC,aAAL,CAAmBT,GAAnB,CAAP;AAAA,IAJC,EAKNQ,IALM,CAKD;AAAA,WAAOR,IAAIU,IAAJ,EAAP;AAAA,IALC,CAAP;AAMA;;;sBACGJ,G,EAAKK,I,EAAK;AAAA;;AACb,UAAOJ,MAAMD,GAAN,EAAW;AACjBO,aAAS,EAAC,gBAAgB,kBAAjB,EADQ;AAEjBC,YAAQ,KAFS;AAGjBC,UAAMC,KAAKC,SAAL,CAAeN,IAAf;AAHW,IAAX,EAKNH,IALM,CAKD;AAAA,WAAO,OAAKC,aAAL,CAAmBT,GAAnB,CAAP;AAAA,IALC,EAMNQ,IANM,CAMD;AAAA,WAAOR,IAAIU,IAAJ,EAAP;AAAA,IANC,CAAP;AAOA","file":"HttpService.js","sourcesContent":["class HttpService{\n\n\t_handleErrors(res){\n\t\tif(!res.ok) {\n\t\t\tconsole.log(\"errors disparado por HttpService\");\n\t\t\tthrow new Error(res.statusText)\n\t\t}\n\t\treturn res\n\t}\n\tget(url){\n\t\treturn fetch(url)\n\t\t.then(res => this._handleErrors(res))\n\t\t.then(res => res.json());\n\t}\n\tpost(url, dado, header){\n\t\treturn fetch(url, {\n\t\t\theaders: header,\n\t\t\tmethod: 'POST',\n\t\t\tbody: dado\n\t\t})\n\t\t.then(res => this._handleErrors(res))\n\t\t.then(res => res.json());\n\t}\n\tdelete(url, header){\n\t\treturn fetch(url, {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: header\n\t\t})\n\t\t.then(res => this._handleErrors(res))\n\t\t.then(res => res.json());\n\t}\n\tput(url, dado){\n\t\treturn fetch(url, {\n\t\t\theaders: {'content-type': 'application/json'},\n\t\t\tmethod: 'PUT',\n\t\t\tbody: JSON.stringify(dado)\n\t\t})\n\t\t.then(res => this._handleErrors(res))\n\t\t.then(res => res.json());\n\t}\n}"]}