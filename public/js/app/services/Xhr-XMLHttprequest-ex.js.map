{"version":3,"sources":["../../app-es6/services/Xhr-XMLHttprequest-ex.js"],"names":["HttpService","res","ok","Error","statusText","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","dado","setRequestHeader","stringify","console","log"],"mappings":"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","file":"Xhr-XMLHttprequest-ex.js","sourcesContent":["class HttpService{\n    \n        _handleErrors(res){\n            if(!res.ok) throw new Error(res.statusText)\n            return res\n        }\n        get(url){\n            return new Promise((resolve, reject) => {\n                let xhr = new XMLHttpRequest();\n                xhr.open('GET', url);\n                xhr.onreadystatechange = () => {\n                    if(xhr.readyState == 4) {\n                        if(xhr.status == 200) {\n                            //console.log(JSON.parse(xhr.responseText));\n                            resolve(JSON.parse(xhr.responseText));\n                        } else {\n                            //console.log(xhr.responseText);\n                            reject(xhr.responseText)\n                        }\n                    }\n                }\n                xhr.send();\n            })\n        };\n\n        post(url, dado){\n            return new Promise((resolve, reject) => {\n                let xhr = new XMLHttpRequest();\n                xhr.open('POST', url, true);\n                xhr.setRequestHeader(\"Content-type\", \"application/json\");\n                xhr.onreadystatechange = () => {\n                    if(xhr.readyState == 4) {\n                        if(xhr.status == 200) {\n                            resolve(JSON.parse(xhr.responseText));\n                        } else {\n                            reject(xhr.responseText)\n                        }\n                    }\n                }\n                xhr.send(JSON.stringify(dado));\n            })\n        }\n    \n        delete(url){\n            return new Promise((resolve, reject) =>{\n                let xhr = new XMLHttpRequest();\n                xhr.open('DELETE', url);\n                xhr.onreadystatechange = () => {\n                    if(xhr.readyState == 4) {\n                        if(xhr.status >= 200 && xhr.status <= 299) {\n                            console.log(xhr);\n                            resolve(true);\n                        } else {\n                            console.log(xhr.responseText);\n                            reject(xhr.responseText)\n                        }\n                    }\n                }\n                xhr.send();\n            })\n        }\n        \n        put(url, dado){\n            return new Promise((resolve, reject) =>{\n                let xhr = new XMLHttpRequest();\n                xhr.open('PUT', url, true);\n                xhr.setRequestHeader(\"Content-type\", \"application/json\");\n                xhr.onreadystatechange = () => {\n                    if(xhr.readyState == 4) {\n                        if(xhr.status >= 200 && xhr.status <= 300) {\n                            console.log(xhr);\n                            resolve(true);\n                        } else {\n                            console.log(xhr.responseText);\n                            reject(xhr.responseText)\n                        }\n                    }\n                }\n                xhr.send(JSON.stringify(dado));\n            })\n        }\n    \n    \n    }"]}